#######################
# Import libraries
import streamlit as st#######################
# Import libraries
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

#######################
# Page configuration
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="üèÇ",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("default")

#######################
# CSS styling
st.markdown("""
<style>

[data-testid="block-container"] {
    padding-left: 2rem;
    padding-right: 2rem;
    padding-top: 1rem;
    padding-bottom: 0rem;
    margin-bottom: -7rem;
}

[data-testid="stVerticalBlock"] {
    padding-left: 0rem;
    padding-right: 0rem;
}

[data-testid="stMetric"] {
    background-color: #393939;
    text-align: center;
    padding: 15px 0;
}

[data-testid="stMetricLabel"] {
  display: flex;
  justify-content: center;
  align-items: center;
}

[data-testid="stMetricDeltaIcon-Up"] {
    position: relative;
    left: 38%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

[data-testid="stMetricDeltaIcon-Down"] {
    position: relative;
    left: 38%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

</style>
""", unsafe_allow_html=True)


#######################
# Load data
df_reshaped = pd.read_csv('titanic.csv') ## Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÎÑ£Í∏∞


#######################
#######################
# Sidebar
with st.sidebar:
    st.header("Titanic Î∂ÑÏÑù ÌïÑÌÑ∞")
    st.caption("Ï¢åÏ∏° ÌïÑÌÑ∞Î•º Î∞îÍæ∏Î©¥ Î™®Îì† ÏßÄÌëú/Ï∞®Ìä∏Í∞Ä ÎèôÍ∏∞ÌôîÎê©ÎãàÎã§.")

    # -----------------------------
    # Ïú†Ìã∏ & ÏïàÏ†ÑÏû•Ïπò
    def has(col: str) -> bool:
        return col in df_reshaped.columns

    df = df_reshaped.copy()

    # -----------------------------
    # ÏãúÍ∞ÅÌôî ÌÖåÎßà
    theme = st.selectbox(
        "ÏÉâÏÉÅ ÌÖåÎßà",
        ["Î∏îÎ£®", "Í∑∏Î¶∞", "ÌçºÌîå", "Ïò§Î†åÏßÄ", "Í∑∏Î†àÏù¥"],
        index=0
    )

    # -----------------------------
    # Î≤îÏ£ºÌòï ÌïÑÌÑ∞
    pclass_options = sorted(df["Pclass"].dropna().unique().tolist()) if has("Pclass") else []
    pclass_sel = st.multiselect(
        "Í∞ùÏã§ Îì±Í∏â (Pclass)",
        options=pclass_options,
        default=pclass_options
    )

    if has("Sex"):
        sex_vals = set(df["Sex"].dropna().astype(str).str.lower().unique().tolist())
        sex_options = ["Ï†ÑÏ≤¥"]
        if "male" in sex_vals:
            sex_options.append("male")
        if "female" in sex_vals:
            sex_options.append("female")
    else:
        sex_options = ["Ï†ÑÏ≤¥"]
    sex_sel = st.radio("ÏÑ±Î≥Ñ (Sex)", options=sex_options, index=0, horizontal=True)

    embarked_options = sorted(df["Embarked"].dropna().unique().tolist()) if has("Embarked") else []
    embarked_sel = st.multiselect(
        "ÏäπÏÑ† Ìï≠Íµ¨ (Embarked)",
        options=embarked_options,
        default=embarked_options
    )

    # -----------------------------
    # Ïó∞ÏÜçÌòï ÌïÑÌÑ∞
    # ÎÇòÏù¥ Í≤∞Ï∏° Ï≤òÎ¶¨ ÏòµÏÖò
    age_strategy_options = ["Ï†úÏô∏", "Ï†ÑÏ≤¥ Ï§ëÏïôÍ∞í ÎåÄÏπò"]
    if has("Pclass"):
        age_strategy_options.append("Îì±Í∏âÎ≥Ñ(Pclass) Ï§ëÏïôÍ∞í ÎåÄÏπò")
    age_strategy = st.selectbox(
        "ÎÇòÏù¥ Í≤∞Ï∏° Ï≤òÎ¶¨",
        options=age_strategy_options,
        index=1 if has("Age") else 0
    )

    if has("Age"):
        age_series = df["Age"].dropna()
        age_max = float(age_series.max()) if not age_series.empty else 80.0
        age_upper = float(max(80.0, age_max))
        age_range = st.slider(
            "ÎÇòÏù¥ Íµ¨Í∞Ñ (Age)",
            min_value=0.0,
            max_value=age_upper,
            value=(0.0, age_upper)
        )
    else:
        age_range = (0.0, 999.0)

    # Ïö¥ÏûÑ ÌïÑÌÑ∞ + Í∑πÎã®Í∞í Ï≤òÎ¶¨
    winsor = st.checkbox("Ïö¥ÏûÑ(Fare) ÏÉÅÌïòÏúÑ 1% ÏúàÏ†ÄÎùºÏù¥Ï¶à", value=True)
    if has("Fare"):
        fare_series = df["Fare"].dropna()
        fare_min = float(fare_series.min()) if not fare_series.empty else 0.0
        fare_max = float(fare_series.max()) if not fare_series.empty else 100.0
        fare_min = float(max(0.0, fare_min))
        fare_range = st.slider(
            "Ïö¥ÏûÑ Íµ¨Í∞Ñ (Fare)",
            min_value=fare_min,
            max_value=fare_max,
            value=(fare_min, fare_max)
        )
    else:
        fare_range = (0.0, 1e9)

    # Í∞ÄÏ°±/ÎèôÎ∞ò
    family_size_enable = has("SibSp") and has("Parch")
    if family_size_enable:
        family_size_series = df["SibSp"].fillna(0) + df["Parch"].fillna(0) + 1
        fs_min = int(family_size_series.min())
        fs_max = int(family_size_series.max())
        fs_range = st.slider(
            "Í∞ÄÏ°± Í∑úÎ™® (FamilySize = SibSp + Parch + 1)",
            min_value=fs_min,
            max_value=fs_max,
            value=(fs_min, fs_max)
        )
    else:
        fs_range = (0, 999)

    # Cabin Ïú†Î¨¥ ÌïÑÌÑ∞
    if has("Cabin"):
        cabin_opt = st.radio("Cabin Ï†ïÎ≥¥", options=["Ï†ÑÏ≤¥", "ÏûàÏùå", "ÏóÜÏùå"], index=0, horizontal=True)
    else:
        cabin_opt = "Ï†ÑÏ≤¥"

    st.markdown("---")

    # -----------------------------
    # ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
    if st.button("ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî"):
        for k in ["filters", "df_filtered"]:
            if k in st.session_state:
                del st.session_state[k]
        st.experimental_rerun()

    # -----------------------------
    # Ï†ÑÏ≤òÎ¶¨ & ÌïÑÌÑ∞ÎßÅ ÌååÏù¥ÌîÑÎùºÏù∏
    # 1) Í≤∞Ï∏° Ï≤òÎ¶¨: Age
    if has("Age"):
        if age_strategy == "Ï†úÏô∏":
            df = df[df["Age"].notna()]
        elif age_strategy == "Ï†ÑÏ≤¥ Ï§ëÏïôÍ∞í ÎåÄÏπò":
            df.loc[:, "Age"] = df["Age"].fillna(df["Age"].median())
        elif age_strategy == "Îì±Í∏âÎ≥Ñ(Pclass) Ï§ëÏïôÍ∞í ÎåÄÏπò" and has("Pclass"):
            df.loc[:, "Age"] = df.groupby("Pclass")["Age"].transform(lambda s: s.fillna(s.median()))

    # 2) ÌååÏÉù: FamilySize
    if family_size_enable:
        df.loc[:, "FamilySize"] = df["SibSp"].fillna(0) + df["Parch"].fillna(0) + 1

    # 3) Winsorize Fare
    if has("Fare") and winsor and df["Fare"].notna().any():
        lo = float(df["Fare"].quantile(0.01))
        hi = float(df["Fare"].quantile(0.99))
        df.loc[:, "Fare"] = df["Fare"].clip(lower=lo, upper=hi)

    # 4) Ïã§Ï†ú ÌïÑÌÑ∞ Ï†ÅÏö©
    if has("Pclass") and pclass_sel:
        df = df[df["Pclass"].isin(pclass_sel)]
    if has("Sex") and sex_sel != "Ï†ÑÏ≤¥":
        df = df[df["Sex"].astype(str).str.lower() == sex_sel]
    if has("Embarked") and embarked_sel:
        df = df[df["Embarked"].isin(embarked_sel)]
    if has("Age"):
        df = df[(df["Age"] >= age_range[0]) & (df["Age"] <= age_range[1])]
    if has("Fare"):
        df = df[(df["Fare"] >= fare_range[0]) & (df["Fare"] <= fare_range[1])]
    if family_size_enable:
        df = df[(df["FamilySize"] >= fs_range[0]) & (df["FamilySize"] <= fs_range[1])]
    if has("Cabin") and cabin_opt != "Ï†ÑÏ≤¥":
        if cabin_opt == "ÏûàÏùå":
            df = df[df["Cabin"].notna()]
        else:
            df = df[df["Cabin"].isna()]

    # -----------------------------
    # ÏÑ∏ÏÖò ÏÉÅÌÉú Ï†ÄÏû• Î∞è ÏöîÏïΩ
    st.session_state["filters"] = {
        "theme": theme,
        "pclass": pclass_sel,
        "sex": sex_sel,
        "embarked": embarked_sel,
        "age_strategy": age_strategy,
        "age_range": age_range,
        "winsor": winsor,
        "fare_range": fare_range,
        "family_size_range": fs_range,
        "cabin_opt": cabin_opt,
    }
    st.session_state["df_filtered"] = df

    st.subheader("ÏöîÏïΩ")
    st.metric("ÏÑ†ÌÉùÎêú Î†àÏΩîÎìú Ïàò", f"{len(df):,}")

#######################
# Plots




# #######################
# # Dashboard Main Panel
col = st.columns((1.5, 4.5, 2), gap='medium')



#######################
# Dashboard Main Panel - Column 1


with col[0]:
    st.subheader("ÏöîÏïΩ ÏßÄÌëú")

    df_filtered = st.session_state.get("df_filtered", df_reshaped)

    if len(df_filtered) == 0:
        st.warning("ÏÑ†ÌÉùÎêú Ï°∞Í±¥Ïóê ÎßûÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    else:
        total_passengers = len(df_filtered)
        survival_rate = df_filtered["Survived"].mean() * 100 if "Survived" in df_filtered else None
        avg_age = df_filtered["Age"].mean() if "Age" in df_filtered else None
        avg_fare = df_filtered["Fare"].mean() if "Fare" in df_filtered else None
        avg_family = df_filtered["FamilySize"].mean() if "FamilySize" in df_filtered else None

        # KPI metrics
        st.metric("Ï¥ù ÌÉëÏäπÍ∞ù Ïàò", f"{total_passengers:,}")

        if survival_rate is not None:
            st.metric("ÏÉùÏ°¥Ïú®", f"{survival_rate:.1f}%")

        if avg_age is not None:
            st.metric("ÌèâÍ∑† ÎÇòÏù¥", f"{avg_age:.1f}")

        if avg_fare is not None:
            st.metric("ÌèâÍ∑† Ïö¥ÏûÑ", f"{avg_fare:.2f}")

        if avg_family is not None:
            st.metric("ÌèâÍ∑† Í∞ÄÏ°± Í∑úÎ™®", f"{avg_family:.1f}")

        st.markdown("---")

        # ÏÑ±Î≥Ñ/Îì±Í∏â Î∂ÑÌè¨ ÏöîÏïΩ
        if "Sex" in df_filtered:
            sex_counts = df_filtered["Sex"].value_counts(normalize=True) * 100
            st.caption("ÏÑ±Î≥Ñ Î∂ÑÌè¨ (%)")
            for sex, val in sex_counts.items():
                st.progress(val/100, text=f"{sex}: {val:.1f}%")

        if "Pclass" in df_filtered:
            pclass_counts = df_filtered["Pclass"].value_counts(normalize=True) * 100
            st.caption("Í∞ùÏã§ Îì±Í∏â Î∂ÑÌè¨ (%)")
            for cls, val in pclass_counts.items():
                st.progress(val/100, text=f"Pclass {cls}: {val:.1f}%")



# with col[1]:
#######################
# Dashboard Main Panel - Column 2

with col[1]:
    st.subheader("ÌÉëÏäπÍ∞ù ÌäπÏÑ±Î≥Ñ ÏÉùÏ°¥ Ìå®ÌÑ¥")

    df_filtered = st.session_state.get("df_filtered", df_reshaped)

    if len(df_filtered) == 0:
        st.warning("ÏÑ†ÌÉùÎêú Ï°∞Í±¥Ïóê ÎßûÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    else:
        # -----------------------------
        # Age Î∂ÑÌè¨ + ÏÉùÏ°¥ Ïó¨Î∂Ä
        if "Age" in df_filtered and "Survived" in df_filtered:
            st.markdown("**ÎÇòÏù¥ Î∂ÑÌè¨ÏôÄ ÏÉùÏ°¥ Ïó¨Î∂Ä**")

            age_chart = alt.Chart(df_filtered).mark_bar().encode(
                alt.X("Age:Q", bin=alt.Bin(maxbins=20), title="ÎÇòÏù¥(Age)"),
                alt.Y("count():Q", title="ÌÉëÏäπÍ∞ù Ïàò"),
                alt.Color("Survived:N",
                          scale=alt.Scale(domain=[0, 1],
                                          range=["#d62728", "#1f77b4"]),
                          title="ÏÉùÏ°¥ Ïó¨Î∂Ä"),
                tooltip=["count()"]
            ).properties(
                width="container",
                height=300
            )
            st.altair_chart(age_chart, use_container_width=True)

        st.markdown("---")

        # -----------------------------
        # Age √ó Fare ÌûàÌä∏Îßµ (ÏÉùÏ°¥Ïú®)
        if "Age" in df_filtered and "Fare" in df_filtered and "Survived" in df_filtered:
            st.markdown("**ÎÇòÏù¥ √ó Ïö¥ÏûÑ Íµ¨Í∞ÑÎ≥Ñ ÌèâÍ∑† ÏÉùÏ°¥Ïú®**")

            # Age, FareÎ•º Íµ¨Í∞ÑÌôî
            df_bins = df_filtered.copy()
            df_bins["AgeBin"] = pd.cut(df_bins["Age"], bins=10)
            df_bins["FareBin"] = pd.cut(df_bins["Fare"], bins=10)

            survival_pivot = (
                df_bins.groupby(["AgeBin", "FareBin"])["Survived"]
                .mean()
                .reset_index()
                .dropna()
            )

            heatmap = alt.Chart(survival_pivot).mark_rect().encode(
                alt.X("AgeBin:N", title="ÎÇòÏù¥ Íµ¨Í∞Ñ"),
                alt.Y("FareBin:N", title="Ïö¥ÏûÑ Íµ¨Í∞Ñ"),
                alt.Color("Survived:Q",
                          scale=alt.Scale(scheme="blues"),
                          title="ÌèâÍ∑† ÏÉùÏ°¥Ïú®"),
                tooltip=["Survived:Q"]
            ).properties(
                width="container",
                height=400
            )
            st.altair_chart(heatmap, use_container_width=True)



# with col[2]:

#######################
# Dashboard Main Panel - Column 3
with col[2]:
    st.subheader("ÏÉÅÏÑ∏ Î∂ÑÏÑù ¬∑ ÏàúÏúÑ ¬∑ About")

    df_filtered = st.session_state.get("df_filtered", df_reshaped)

    if len(df_filtered) == 0:
        st.warning("ÏÑ†ÌÉùÎêú Ï°∞Í±¥Ïóê ÎßûÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    else:
        # -----------------------------
        # Top Í∑∏Î£π ÏàúÏúÑ (ÏÉùÏ°¥Ïú® Í∏∞Ï§Ä)
        st.markdown("### Top Í∑∏Î£π ÏàúÏúÑ (ÏÉùÏ°¥Ïú®)")

        grp_options = []
        if {"Pclass", "Sex"}.issubset(df_filtered.columns):
            grp_options.append("Pclass √ó Sex")
        if "Embarked" in df_filtered.columns:
            grp_options.append("Embarked")
        if "Pclass" in df_filtered.columns:
            grp_options.append("Pclass")
        if "Sex" in df_filtered.columns:
            grp_options.append("Sex")

        if "Survived" not in df_filtered.columns or len(grp_options) == 0:
            st.info("Îû≠ÌÇπÏùÑ ÎßåÎì§Í∏∞ ÏúÑÌïú Ïª¨Îüº(Survived, Pclass/Sex/Embarked)Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.")
        else:
            sel_group = st.selectbox("Í∑∏Î£π ÏÑ†ÌÉù", options=grp_options, index=0)
            top_n = st.slider("Top N", min_value=3, max_value=15, value=5, step=1)

            # Í∑∏Î£π ÌÇ§ Íµ¨ÏÑ±
            if sel_group == "Pclass √ó Sex":
                group_keys = ["Pclass", "Sex"]
            else:
                group_keys = [sel_group]

            agg = (
                df_filtered.groupby(group_keys)
                .agg(ÏÉùÏ°¥Ïú®=("Survived", "mean"), ÌëúÎ≥∏Ïàò=("Survived", "size"))
                .reset_index()
            )
            # ÌçºÏÑºÌä∏ Ïª¨Îüº Î≥ÑÎèÑÎ°ú ÏÉùÏÑ± (Altair Ïù∏ÏΩîÎî© ÏïàÏ†Ñ)
            agg["ÏÉùÏ°¥Ïú®_pct"] = (agg["ÏÉùÏ°¥Ïú®"] * 100).round(1)

            # Í∑∏Î£π ÎùºÎ≤® Î¨∏ÏûêÏó¥ Ïª¨Îüº ÏÉùÏÑ± (repeat ÎåÄÏã† yÏ∂ïÏóê Î∞îÎ°ú ÏÇ¨Ïö©)
            agg["Í∑∏Î£π"] = agg[group_keys].astype(str).agg(" - ".join, axis=1)

            agg = agg.sort_values(["ÏÉùÏ°¥Ïú®_pct", "ÌëúÎ≥∏Ïàò"], ascending=[False, False]).head(top_n)

            # ÎßâÎåÄ + ÌÖçÏä§Ìä∏ ÎùºÎ≤® (repeat ÏóÜÏù¥ layer Í∞ÄÎä•)
            bars = alt.Chart(agg).mark_bar().encode(
                x=alt.X("ÏÉùÏ°¥Ïú®_pct:Q", title="ÏÉùÏ°¥Ïú®(%)"),
                y=alt.Y("Í∑∏Î£π:N", sort="-x", title="Í∑∏Î£π"),
                tooltip=["Í∑∏Î£π", "ÏÉùÏ°¥Ïú®_pct", "ÌëúÎ≥∏Ïàò"]
            ).properties(
                width="container",
                height=220 + 18 * len(agg)
            )

            labels = alt.Chart(agg).mark_text(align="left", baseline="middle", dx=3).encode(
                x="ÏÉùÏ°¥Ïú®_pct:Q",
                y=alt.Y("Í∑∏Î£π:N", sort="-x"),
                text="ÏÉùÏ°¥Ïú®_pct:Q"
            )

            st.altair_chart(bars + labels, use_container_width=True)
            st.dataframe(agg[["Í∑∏Î£π", "ÏÉùÏ°¥Ïú®_pct", "ÌëúÎ≥∏Ïàò"]], use_container_width=True)

        st.markdown("---")

        # -----------------------------
        # ÌîºÎ≤ó ÏöîÏïΩ ÌÖåÏù¥Î∏î (ÏÉùÏ°¥Ïú®, ÌëúÎ≥∏Ïàò)
        st.markdown("### ÌîºÎ≤ó ÏöîÏïΩ ÌÖåÏù¥Î∏î")
        pivot_row_candidates = [c for c in ["Pclass", "Sex", "Embarked"] if c in df_filtered.columns]
        if "Survived" not in df_filtered.columns or len(pivot_row_candidates) == 0:
            st.info("ÌîºÎ≤óÏùÑ ÎßåÎì§Í∏∞ ÏúÑÌïú Ïª¨Îüº(Survived, Pclass/Sex/Embarked)Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.")
        else:
            row_key = st.selectbox("Ìñâ (Row)", options=pivot_row_candidates, index=0)
            col_candidates = [c for c in pivot_row_candidates if c != row_key]
            col_key = st.selectbox("Ïó¥ (Column)", options=["(ÏóÜÏùå)"] + col_candidates, index=0)

            df_piv = df_filtered.copy()
            if col_key == "(ÏóÜÏùå)":
                surv_tbl = df_piv.groupby(row_key)["Survived"].agg(["mean", "size"]).reset_index()
                surv_tbl.rename(columns={"mean": "ÏÉùÏ°¥Ïú®", "size": "ÌëúÎ≥∏Ïàò"}, inplace=True)
                surv_tbl["ÏÉùÏ°¥Ïú®(%)"] = (surv_tbl["ÏÉùÏ°¥Ïú®"] * 100).round(1)
                surv_tbl = surv_tbl[[row_key, "ÏÉùÏ°¥Ïú®(%)", "ÌëúÎ≥∏Ïàò"]]
                st.caption("ÏÉùÏ°¥Ïú®(%) ¬∑ ÌëúÎ≥∏Ïàò")
                st.dataframe(surv_tbl, use_container_width=True)
            else:
                surv_pivot = pd.pivot_table(
                    df_piv, values="Survived", index=row_key, columns=col_key, aggfunc="mean"
                ) * 100
                surv_pivot = surv_pivot.round(1)
                count_pivot = pd.pivot_table(
                    df_piv, values="Survived", index=row_key, columns=col_key, aggfunc="size"
                ).astype(int)
                st.caption("ÏÉùÏ°¥Ïú®(%)")
                st.dataframe(surv_pivot, use_container_width=True)
                st.caption("ÌëúÎ≥∏Ïàò")
                st.dataframe(count_pivot, use_container_width=True)

        st.markdown("---")

        # -----------------------------
        # ÏÉÅÏÑ∏ ÌÖåÏù¥Î∏î & Îã§Ïö¥Î°úÎìú
        st.markdown("### ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ & Îã§Ïö¥Î°úÎìú")
        show_cols = [c for c in ["Name", "Ticket", "Pclass", "Sex", "Age", "Fare", "Survived", "Embarked", "FamilySize", "Cabin"] if c in df_filtered.columns]
        st.dataframe(df_filtered[show_cols].head(500), use_container_width=True)

        csv_bytes = df_filtered.to_csv(index=False).encode("utf-8")
        st.download_button(
            label="ÌòÑÏû¨ ÌïÑÌÑ∞ Ï†ÅÏö© Îç∞Ïù¥ÌÑ∞ Îã§Ïö¥Î°úÎìú (CSV)",
            data=csv_bytes,
            file_name="titanic_filtered.csv",
            mime="text/csv",
            use_container_width=True
        )

        st.markdown("---")

        # -----------------------------
        # About ÏÑπÏÖò
        st.markdown("### About")
        st.write(
            "- **Dataset**: Titanic survival dataset\n"
            "- **Ï£ºÏöî ÌååÏÉù/Ï≤òÎ¶¨**: FamilySize = SibSp + Parch + 1, Fare ÏúàÏ†ÄÎùºÏù¥Ï¶à(ÏòµÏÖò), Age Í≤∞Ï∏°Ïπò ÎåÄÏπò ÏòµÏÖò\n"
            "- **Ìï¥ÏÑù Ïú†Ïùò**: ÌëúÎ≥∏ ÏàòÍ∞Ä Ï†ÅÏùÄ Í∑∏Î£πÏùò ÏÉùÏ°¥Ïú®ÏùÄ Î≥ÄÎèôÏÑ±Ïù¥ ÌÅΩÎãàÎã§. Í≤∞Ï∏°/Í∑πÎã®Í∞í Ï≤òÎ¶¨ ÏòµÏÖòÏóê Îî∞Îùº Í≤∞Í≥ºÍ∞Ä Îã¨ÎùºÏßà Ïàò ÏûàÏäµÎãàÎã§."
        )
